name: Go Test & Versioning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:            
    inputs:
      release_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write  
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
      - name: Install dependencies
        run: go mod tidy
      - name: Run tests
        run: go test ./... -v -cover
  
  version:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "")
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create new tag
        id: create_tag
        run: |
          old_tag="${{ steps.get_tag.outputs.tag }}"
          release_type="${{ github.event.inputs.release_type || 'patch' }}"

          if [[ "$old_tag" == "" ]]; then
            major=0
            minor=1
            patch=0
          else
            IFS='.' read -r -a parts <<< "${old_tag#v}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
          fi

          case "$release_type" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch|*)
              patch=$((patch + 1))
              ;;
          esac

          new_tag="v${major}.${minor}.${patch}"

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          git tag "$new_tag"
          git push origin "$new_tag"
          echo "tag_name=$new_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          release_name: Release ${{ steps.create_tag.outputs.tag_name }}
          body: |
            ðŸ†• Automatisches Release
            âœ¨ Version: ${{ steps.create_tag.outputs.tag_name }}
